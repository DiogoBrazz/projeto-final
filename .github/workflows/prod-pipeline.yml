# NOME DA PIPELINE ALTERADO PARA PRODUÇÃO
name: Deploy to Production (GKE)

# GATILHO ALTERADO PARA ACIONAMENTO MANUAL NO GITHUB ACTIONS
on:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform IaC (Infra as Code)'
    runs-on: ubuntu-latest
    
    env:
      # Use as variáveis corretas para o seu ambiente de Produção
      TF_STATE_BUCKET: "bucket-tfstate-amira-462108"
      GCP_PROJECT_ID: "festive-post-461507-v9"

    jobs:
  terraform:
    name: 'Terraform IaC (Infra as Code)'
    runs-on: ubuntu-latest
    
    env:
      # Use as variáveis corretas para o seu ambiente de Produção
      TF_STATE_BUCKET: "bucket-tfstate-amira-462108"
      GCP_PROJECT_ID: "festive-post-461507-v9"
      # Adicione o e-mail da sua conta de serviço aqui para facilitar
      GCP_SA_EMAIL: "github-actions-prod-deployer@festive-post-461507-v9.iam.gserviceaccount.com"

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v2

    - name: Autenticar no Google Cloud
      id: auth
      run: |
        echo '${{ secrets.GCP_SA_KEY_PROD }}' > gcloud-key.json
        gcloud auth activate-service-account --key-file=gcloud-key.json
        gcloud config set project ${{ env.GCP_PROJECT_ID }}
        echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcloud-key.json" >> $GITHUB_ENV

    # --- NOVOS PASSOS DE DIAGNÓSTICO ---
    - name: 1. Verificar identidade autenticada
      run: gcloud auth list

    - name: 2. Verificar permissões no Projeto
      run: |
        echo "A verificar as permissões do projeto para ${{ env.GCP_SA_EMAIL }}..."
        gcloud projects get-iam-policy ${{ env.GCP_PROJECT_ID }} \
          --flatten="bindings[].members" \
          --format='table(bindings.role)' \
          --filter="bindings.members:${{ env.GCP_SA_EMAIL }}"

    - name: 3. Verificar permissões no Bucket
      run: |
        echo "A verificar as permissões do bucket gs://${{ env.TF_STATE_BUCKET }}..."
        gsutil iam get gs://${{ env.TF_STATE_BUCKET }}

    # --- O NOSSO TESTE ORIGINAL ---
    - name: 4. Tentar listar objetos no bucket
      run: gsutil ls gs://${{ env.TF_STATE_BUCKET }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # --- ETAPA PRINCIPAL ---
    - name: Terraform Init (Conecta ao bucket)
      run: terraform init -input=false
      working-directory: ./terraform
      
    - name: Terraform Apply (Cria/Atualiza o cluster)
      run: terraform apply -auto-approve
      working-directory: ./terraform

  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Instalar dependências do Backend
        working-directory: ./backend
        run: npm install
      - name: Rodar testes do Backend
        working-directory: ./backend
        run: npm test

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    env:
      # <<< MUDADO: Aponte para o ID do seu projeto de PRODUÇÃO
      GCP_PROJECT_ID: "festive-post-461507-v9"
      GCP_REGION: us-central1
      ARTIFACT_REPO: projeto-final-imagens # Pode ser o mesmo ou um novo repo para Prod
      IMAGE_BACKEND: lista-itens-backend
      IMAGE_FRONTEND: lista-itens-frontend
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # <<< MUDADO: Usa o segredo da conta de PRODUÇÃO
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
      - name: Configurar Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      - name: Build e Push do Backend
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }} ./backend
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}
      - name: Build e Push do Frontend
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }} ./frontend
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

  deploy:
    # NOME DO JOB ALTERADO PARA PRODUÇÃO
    name: Deploy to GKE Production
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      # <<< MUDADO: Aponte para o ID do seu projeto de PRODUÇÃO
      GCP_PROJECT_ID: "festive-post-461507-v9"
      # <<< MUDADO: Nome do cluster de PRODUÇÃO
      GKE_CLUSTER: "prod-cluster" 
      GKE_ZONE: us-central1-a
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup gcloud CLI with GKE Auth Plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin,kubectl'

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # <<< MUDADO: Usa o segredo da conta de PRODUÇÃO
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}
      - name: Conectar ao cluster GKE
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
      - name: Substituir a Tag da Imagem nos Deployments
        run: |
          sed -i 's|lista-itens-backend:.*|lista-itens-backend:${{ github.sha }}|g' ./arquivos/backend-config/backend-deployment.yaml
          sed -i 's|lista-itens-frontend:.*|lista-itens-frontend:${{ github.sha }}|g' ./arquivos/frontend-config/frontend-deployment.yaml
      - name: Deploy no Kubernetes
        run: |
          echo "INFO: Aplicando namespaces primeiro..."
          find ./arquivos -name "namespaces.yaml" -exec kubectl apply -f {} \;
          
          echo "INFO: Aguardando 5 segundos para a propagação dos namespaces..."
          sleep 5
          
          echo "INFO: Aplicando os outros recursos..."
          kubectl apply -R -f ./arquivos/
